#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Description: A simple translator based on translate API

import os
import uuid
import requests

##############################################################################
# Translate API
##############################################################################

class TranslateAPI(object):
    def __init__(self):
        self.resource_key = self.load_conf("ST_RES_KEY")
        self.region = self.load_conf("ST_REGION", "eastasia")
        self.endpoint = self.load_conf("ST_ENDPOINT", "https://api.cognitive.microsofttranslator.com")

        self.headers = {
            'Ocp-Apim-Subscription-Key': self.resource_key,
            'Ocp-Apim-Subscription-Region': self.region,
            'Content-type': 'application/json',
            'X-ClientTraceId': str(uuid.uuid4())
        }

        self.api_url = self.endpoint + '/translate'
        self.params = {
            'api-version': '3.0',
            'from': 'en',
            'to': ['zh-Hans']
        }

    def load_conf(self, key, default=None):
        if key not in os.environ and default is None:
            raise Exception("Please Set %s"%key)
        return os.environ.get(key, default)

    def translate(self, text):
        translated_text = ""

        body = [
                {'text': text}
        ]
        request = requests.post(self.api_url, 
                                params=self.params, 
                                headers=self.headers, 
                                json=body)
        response = request.json()
        if (len(response)) == 0:
            return translated_text

        response = response[0]
        response = response['translations']
        if (len(response)) == 0:
            return translated_text
        response = response[0]
        translated_text = response['text']

        return translated_text


##############################################################################
# GUI (generated by chatgpt)
##############################################################################
class TranslateGUI(object):
    def __init__(self):
        self.tapi = TranslateAPI()

    def run(self):
        import tkinter as tk

        # create the main window
        root = tk.Tk()
        root.geometry("800x800")
       
        # create the button function
        def button_clicked():
            orig_text = root.clipboard_get()
            if check_box_var.get() == 1:
                orig_text = orig_text.splitlines()
                orig_text = " ".join(orig_text)
            else:
                pass

            translated_text = self.tapi.translate(orig_text)

            text1.delete("1.0", tk.END)
            text1.insert(tk.END, orig_text)
            text2.delete("1.0", tk.END)
            text2.insert(tk.END, translated_text)
        
        # create the button
        button = tk.Button(root, text="Paste and Translate", command=button_clicked)
        
        # place the widgets on the window
        button.pack(pady=10)

        check_box_var = tk.IntVar()
        check_box_var.set(1)
        check_box = tk.Checkbutton(root, text="去除换行符", variable=check_box_var)
        check_box.pack(pady=10)

        # create the text areas

        frame = tk.Frame(root)
        frame.pack()

        font = ("DejaVu Sans Mono", 12)
        text1 = tk.Text(frame, font=font)
        text2 = tk.Text(frame, font=font)


        text1.insert(tk.END, "请点击按钮翻译剪切板中的内容")

        text1.pack(pady=10, fill='both', padx=10)
        text2.pack(fill='both', padx=10)

        
        # start the main loop
        root.mainloop()


##############################################################################
# main
##############################################################################
if __name__ == "__main__":
    gui = TranslateGUI()
    gui.run()
    # tapi = TranslateAPI()
    # print(tapi.translate("Hello, world"))
