#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Description: A simple translator based on translate API

import os
import uuid
import requests
import tkinter as tk

##############################################################################
# Translate API
##############################################################################

class TranslateAPI(object):

    def translate(self, text: str) -> str:
        return text

    def load_conf(self, key, default=None):
        if key not in os.environ and default is None:
            raise Exception("Please Set %s"%key)
        return os.environ.get(key, default)

class MicrosoftTranslateAPI(TranslateAPI):
    def __init__(self):
        self.resource_key = self.load_conf("ST_RES_KEY")
        self.region = self.load_conf("ST_REGION", "eastasia")
        self.endpoint = self.load_conf("ST_ENDPOINT", "https://api.cognitive.microsofttranslator.com")

        self.headers = {
            'Ocp-Apim-Subscription-Key': self.resource_key,
            'Ocp-Apim-Subscription-Region': self.region,
            'Content-type': 'application/json',
            'X-ClientTraceId': str(uuid.uuid4())
        }

        self.api_url = self.endpoint + '/translate'
        self.params = {
            'api-version': '3.0',
            'from': 'en',
            'to': ['zh-Hans']
        }


    def translate(self, text):
        translated_text = ""

        body = [
                {'text': text}
        ]
        request = requests.post(self.api_url, 
                                params=self.params, 
                                headers=self.headers, 
                                json=body)
        response = request.json()
        if (len(response)) == 0:
            return translated_text

        response = response[0]
        response = response['translations']
        if (len(response)) == 0:
            return translated_text
        response = response[0]
        translated_text = response['text']

        return translated_text


##############################################################################
# GUI (generated by chatgpt)
##############################################################################

class TranslateGUIModel(object):

    def __init__(self) -> None:
        self.original_text = ""
        self.translated_text = ""

        self.tapi = MicrosoftTranslateAPI()

    def translate(self, orig_text):
        self.original_text = orig_text
        self.translated_text = self.tapi.translate(self.original_text)

class TranslateGUIView(object):

    def __init__(self) -> None:
        self.root = tk.Tk()

        # create the button
        self.button = tk.Button(self.root, text="Paste and Translate")
        
        # place the widgets on the window
        self.button.pack(pady=10)

        self.check_box_trim_var = tk.IntVar()
        self.check_box_trim_var.set(1)
        self.check_box_trim = tk.Checkbutton(self.root, text="去除换行符", variable=self.check_box_trim_var)
        self.check_box_trim.pack(pady=10)

        self.check_box_monitor_var = tk.IntVar()
        self.check_box_monitor_var.set(0)
        self.check_box_monitor = tk.Checkbutton(self.root, text="监听剪贴板", variable=self.check_box_monitor_var)
        self.check_box_monitor.pack(pady=10)

        self.frame = tk.Frame(self.root)
        self.frame.pack()

        font = ("DejaVu Sans Mono", 12)
        self.text1 = tk.Text(self.frame, font=font)
        self.text2 = tk.Text(self.frame, font=font)


        self.text1.insert(tk.END, "请点击按钮翻译剪贴板中的内容")

        self.text1.pack(pady=10, fill='both', padx=10)
        self.text2.pack(fill='both', padx=10)

    def get_clipboard(self):
        return self.root.clipboard_get()
    
    def set_text1(self, t):
        self.text1.delete("1.0", tk.END)
        self.text1.insert(tk.END, t)

    def set_text2(self, t):
        self.text2.delete("1.0", tk.END)
        self.text2.insert(tk.END, t)

class TranslateGUIController(object):

    def __init__(self, model, view) -> None:
        self.model = model  
        self.view = view

        self.view.button.config(command=self.paste_and_translate)

        self.view.check_box_monitor.config(command=self.monitor_clipboard)

        self.run_after_id = None

    def paste_and_translate(self):
        orig_text = self.view.get_clipboard()
        # remove the CR
        if self.view.check_box_trim_var.get() == 1:
            orig_text = orig_text.splitlines()
            orig_text = " ".join(orig_text)
        else:
            pass
        
        self.model.translate(orig_text)

        self.view.set_text1(self.model.original_text)
        self.view.set_text2(self.model.translated_text)

    def monitor_clipboard(self):
        if self.view.check_box_monitor_var.get() == 1:
            self.run_monitor()
        elif self.view.check_box_monitor_var.get() == 0 and self.run_after_id:
            self.view.root.after_cancel(self.run_after_id)
            self.run_after_id = None

    def run_monitor(self):
        if self.view.check_box_monitor_var.get() == 0 and self.run_after_id:
            self.view.root.after_cancel(self.run_after_id)

        
        old_text = self.model.original_text
        orig_text = self.view.get_clipboard()

        if orig_text != old_text:
            self.view.set_text1(orig_text)
    
        self.run_after_id = self.view.root.after(1000, self.run_monitor)



class TranslateGUI(object):
    def __init__(self):
        self.model = TranslateGUIModel()
        self.view = TranslateGUIView()
        self.controller = TranslateGUIController(self.model, self.view)

    def run(self):
        self.view.root.mainloop()


##############################################################################
# main
##############################################################################
if __name__ == "__main__":
    gui = TranslateGUI()
    gui.run()

