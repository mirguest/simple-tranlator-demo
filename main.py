#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Description: A simple translator based on translate API

"""A simple translator demo"""

import os
import uuid
import tkinter as tk
import requests

##############################################################################
# Translate API
##############################################################################

class TranslateAPI:
    """This is the base class of Translate API"""

    def translate(self, text: str) -> str:
        """The API to translate a string to a string"""
        return text

    def load_conf(self, key, default=None):
        """Utility to load configuration"""
        if key not in os.environ and default is None:
            raise NotImplementedError(f"Please Set {key}")
        return os.environ.get(key, default)

class MicrosoftTranslateAPI(TranslateAPI):
    """Microsoft Azure Translate API"""
    def __init__(self):
        default_region = "eastasia"
        default_endpoint = "https://api.cognitive.microsofttranslator.com"
        default_timeout = 10

        self.resource_key = self.load_conf("ST_RES_KEY")
        self.region = self.load_conf("ST_REGION", default_region)
        self.endpoint = self.load_conf("ST_ENDPOINT", default_endpoint)

        self.timeout = self.load_conf("ST_TIMEOUT", default_timeout)

        self.headers = {
            'Ocp-Apim-Subscription-Key': self.resource_key,
            'Ocp-Apim-Subscription-Region': self.region,
            'Content-type': 'application/json',
            'X-ClientTraceId': str(uuid.uuid4())
        }

        self.api_url = self.endpoint + '/translate'
        self.params = {
            'api-version': '3.0',
            'from': 'en',
            'to': ['zh-Hans']
        }


    def translate(self, text):
        translated_text = ""

        body = [
                {'text': text}
        ]

        try:
            request = requests.post(self.api_url,
                                    params=self.params,
                                    headers=self.headers,
                                    timeout=self.timeout,
                                    json=body)
            response = request.json()
            if (len(response)) == 0:
                return translated_text

            response = response[0]
            response = response['translations']
            if (len(response)) == 0:
                return translated_text
            response = response[0]
            translated_text = response['text']

        except requests.exceptions.ConnectTimeout:
            translated_text = "请求超时"

        return translated_text


##############################################################################
# GUI (generated by chatgpt)
##############################################################################

class TranslateGUIModel:
    """The Model part of GUI"""

    def __init__(self) -> None:
        self.original_text = ""
        self.translated_text = ""

        self.tapi = MicrosoftTranslateAPI()

    def translate(self, orig_text):
        """Invoke the translate API"""
        self.original_text = orig_text
        self.translated_text = self.tapi.translate(self.original_text)

class TranslateGUIView:
    """The View part of GUI"""

    def __init__(self) -> None:
        self.initialize_main_window()
        self.initialize_control_widgets()
        self.initialize_text_widgets()

    def initialize_main_window(self):
        """Initialize the Tk main window"""
        self.root = tk.Tk()
        self.root.title('Simple Translator Demo')
        self.root.geometry('800x600')

    def initialize_control_widgets(self):
        """Initialize the control widgets"""
        # The frame includes control widgets
        self.control_frame = tk.Frame(self.root)
        self.control_frame.pack(fill='both', padx=10, pady=10, expand=True)
        # create the button
        self.button = tk.Button(self.control_frame, text="Paste and Translate")

        self.check_box_trim_var = tk.IntVar()
        self.check_box_trim_var.set(1)
        self.check_box_trim = tk.Checkbutton(self.control_frame,
                                            text="去除换行符",
                                            variable=self.check_box_trim_var)

        self.check_box_monitor_var = tk.IntVar()
        self.check_box_monitor_var.set(0)
        self.check_box_monitor = tk.Checkbutton(self.control_frame,
                                                text="监听剪贴板",
                                                variable=self.check_box_monitor_var)

        # place the widgets on the window
        # self.button.pack(pady=10)
        # self.check_box_trim.pack(pady=10)
        # self.check_box_monitor.pack(pady=10)

        self.button.grid(row=0, column=0)
        self.check_box_trim.grid(row=0, column=1)
        self.check_box_monitor.grid(row=0, column=2)

    def initialize_text_widgets(self):
        """Initialize the text widgets"""
        # The frame includes two text widgets
        self.frame = tk.Frame(self.root)
        self.frame.pack(fill='both', padx=10, pady=10, expand=True)

        font = ("DejaVu Sans Mono", 12)
        self.text1 = tk.Text(self.frame, font=font)
        self.text2 = tk.Text(self.frame, font=font)


        self.text1.insert(tk.END, "请点击按钮翻译剪贴板中的内容")

        # self.text1.pack(pady=10, fill='both', padx=10)
        # self.text2.pack(fill='both', padx=10)
        self.text1.grid(row=0, column=0, pady=5, sticky='nsew')
        self.text2.grid(row=1, column=0, pady=5, sticky='nsew')

        self.frame.grid_columnconfigure(0, weight=1)
        self.frame.grid_rowconfigure(0, weight=1)
        self.frame.grid_rowconfigure(1, weight=1)
        self.frame.grid_rowconfigure(0, minsize=self.frame.winfo_height()//2)
        self.frame.grid_rowconfigure(1, minsize=self.frame.winfo_height()//2)

    def get_clipboard(self):
        """Get the content from clipboard"""
        return self.root.clipboard_get()

    def set_text1(self, text):
        """Set the content in the original text widget"""
        self.text1.delete("1.0", tk.END)
        self.text1.insert(tk.END, text)

    def set_text2(self, text):
        """Set the content in the translated text widget"""
        self.text2.delete("1.0", tk.END)
        self.text2.insert(tk.END, text)

class TranslateGUIController:
    """The Controller part of GUI"""

    def __init__(self, model, view) -> None:
        self.model = model
        self.view = view

        self.view.button.config(command=self.paste_and_translate)

        self.view.check_box_monitor.config(command=self.monitor_clipboard)

        self.run_after_id = None

    def paste_and_translate(self):
        """Paste and Translate"""
        orig_text = self.view.get_clipboard()
        # remove the CR
        if self.view.check_box_trim_var.get() == 1:
            orig_text = orig_text.splitlines()
            orig_text = " ".join(orig_text)
        else:
            pass

        self.model.translate(orig_text)

        self.view.set_text1(self.model.original_text)
        self.view.set_text2(self.model.translated_text)

    def monitor_clipboard(self):
        """When the checkbox is selected or unselected, this method is used"""
        if self.view.check_box_monitor_var.get() == 1:
            self.run_monitor()
        elif self.view.check_box_monitor_var.get() == 0 and self.run_after_id:
            self.view.root.after_cancel(self.run_after_id)
            self.run_after_id = None

    def run_monitor(self):
        """The monitor of clipboard"""
        if self.view.check_box_monitor_var.get() == 0 and self.run_after_id:
            self.view.root.after_cancel(self.run_after_id)

        old_text = self.model.original_text
        orig_text = self.view.get_clipboard()

        if orig_text != old_text:
            self.view.set_text1(orig_text)

        self.run_after_id = self.view.root.after(1000, self.run_monitor)

class TranslateGUI:
    """The Main part to put MVC together"""
    def __init__(self):
        self.model = None
        self.view = None
        self.controller = None

        self.init_mvc()

    def run(self):
        """Run the GUI"""
        self.view.root.mainloop()

    def init_mvc(self):
        """Initialize MVC"""
        self.model = TranslateGUIModel()
        self.view = TranslateGUIView()
        self.controller = TranslateGUIController(self.model, self.view)

##############################################################################
# main
##############################################################################
if __name__ == "__main__":
    gui = TranslateGUI()
    gui.run()
